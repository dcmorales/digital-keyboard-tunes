@use '@/styles/abstracts' as *;

.tooltipContainer {
	display: inline-block;
	position: relative;

	.tooltipTextContainer {
		position: absolute;
		visibility: hidden;
		z-index: 1;

		// position tooltip to the bottom, top, left, or right
		@each $position in $tooltipPositions {
			&:has(.#{ $position }) {
				@include tooltip-position($position);
			}
		}

		&.isVisible {
			visibility: visible;
		}
	}

	.tooltipText {
		padding: $size-s;
		position: relative;
		width: 10rem;

		// add color and centered caret to tooltip based on position
		@each $position in $tooltipPositions {
			&.#{ $position } {
				@include tooltip-style($position);
			}
		}

		@include breakpoint(large) {
			width: 7rem;
		}
	}

	&.tooltipDefault {
		position: absolute;

		.infoIcon {
			background-color: $color-white;
			border: 1px solid $color-blue-darkest;
			border-radius: 50%;
			height: $rem-s;
			outline: none;
			padding: 0;
			transition: background-color 0.3s;
			width: $rem-s;

			svg {
				fill: $color-blue-darkest;
				transition: fill 0.3s;
			}

			&:focus {
				background-color: $color-blue-dark;

				svg {
					fill: $color-white;
				}
			}
		}

		// reset text position to be directly under the info icon without centering
		.tooltipTextContainer {
			&:has(.bottom) {
				left: auto;
				top: auto;
				transform: none;
			}

			&.positionedLeft {
				left: auto;
				right: 0;
			}

			// no caret for info icon tooltip
			.tooltipText {
				&::before {
					content: none;
				}
			}
		}
	}

	// consistent style when hovering over tooltip text, not just trigger element
	&:hover {
		button {
			border-color: $color-blue-dark;
			box-shadow: 0 $size-xs $size-s rgba(0, 0, 0, 0.2);
		}

		.infoIcon {
			background-color: $color-blue-dark;
			box-shadow: none;

			svg {
				fill: $color-white;
			}
		}
	}
}

@use '@/styles/abstracts' as *;

.tooltipContainer {
	display: inline-block;
	position: relative;

	.tooltipTextContainer {
		position: absolute;
		visibility: hidden;
		z-index: 1;

		&:has(.bottom) {
			left: 50%;
			padding-top: $size-xs;
			top: 100%;
			transform: translateX(-50%);
		}

		&:has(.top) {
			bottom: 100%;
			left: 50%;
			padding-bottom: $size-xs;
			transform: translateX(-50%);
		}

		&:has(.left) {
			padding-right: $size-xs;
			right: 100%;
			top: 50%;
			transform: translateY(-50%);
		}

		&:has(.right) {
			left: 100%;
			padding-left: $size-xs;
			top: 50%;
			transform: translateY(-50%);
		}

		&.isVisible {
			visibility: visible;
		}
	}

	.tooltipText {
		background-color: $color-blue-darkest;
		border-radius: $size-xs;
		color: $color-white;
		padding: $size-s;
		width: 10rem;

		@include breakpoint(large) {
			width: 7rem;
		}
	}

	&.tooltipDefault {
		position: absolute;

		.infoIcon {
			background-color: $color-white;
			border: 1px solid $color-blue-darkest;
			border-radius: 50%;
			height: $rem-s;
			outline: none;
			padding: 0;
			transition: background-color 0.3s;
			width: $rem-s;

			svg {
				fill: $color-blue-darkest;
				transition: fill 0.3s;
			}

			&:focus {
				background-color: $color-blue-dark;

				svg {
					fill: $color-white;
				}
			}
		}

		// reset text position to be directly under the info icon without centering
		.tooltipTextContainer {
			&:has(.bottom) {
				top: auto;
				left: auto;
				transform: none;
			}

			&.positionedLeft {
				left: auto;
				right: 0;
			}
		}
	}

	// consistent style when hovering over tooltip text, not just trigger element
	&:hover {
		button {
			border-color: $color-blue-dark;
			box-shadow: 0 $size-xs $size-s rgba(0, 0, 0, 0.2);
		}

		.infoIcon {
			background-color: $color-blue-dark;
			box-shadow: none;

			svg {
				fill: $color-white;
			}
		}
	}
}
